
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 27 01:06:16 BRT 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import erros.ListaErros;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 27 01:06:16 BRT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\010\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\004\004\000\002\004\002\000" +
    "\002\011\010\000\002\051\003\000\002\051\003\000\002" +
    "\005\006\000\002\005\003\000\002\013\005\000\002\013" +
    "\002\000\002\006\007\000\002\014\004\000\002\014\002" +
    "\000\002\007\011\000\002\007\011\000\002\007\003\000" +
    "\002\015\003\000\002\015\002\000\002\016\004\000\002" +
    "\016\002\000\002\017\005\000\002\020\004\000\002\020" +
    "\002\000\002\012\004\000\002\021\004\000\002\021\002" +
    "\000\002\024\005\000\002\023\004\000\002\023\002\000" +
    "\002\022\005\000\002\022\010\000\002\022\007\000\002" +
    "\022\005\000\002\022\007\000\002\022\010\000\002\022" +
    "\003\000\002\022\003\000\002\053\002\000\002\022\010" +
    "\000\002\054\002\000\002\022\011\000\002\055\002\000" +
    "\002\022\007\000\002\056\002\000\002\022\010\000\002" +
    "\057\002\000\002\022\011\000\002\060\002\000\002\022" +
    "\010\000\002\061\002\000\002\022\010\000\002\062\002" +
    "\000\002\022\010\000\002\022\003\000\002\052\004\000" +
    "\002\052\003\000\002\031\004\000\002\031\002\000\002" +
    "\032\003\000\002\032\002\000\002\033\004\000\002\033" +
    "\002\000\002\027\005\000\002\034\004\000\002\034\002" +
    "\000\002\035\004\000\002\035\002\000\002\030\005\000" +
    "\002\063\002\000\002\030\006\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\025\005\000\002\025\003" +
    "\000\002\037\003\000\002\037\002\000\002\040\005\000" +
    "\002\040\002\000\002\042\004\000\002\043\004\000\002" +
    "\043\002\000\002\044\004\000\002\044\003\000\002\044" +
    "\003\000\002\044\005\000\002\044\005\000\002\046\003" +
    "\000\002\046\002\000\002\047\005\000\002\047\002\000" +
    "\002\026\004\000\002\050\005\000\002\050\006\000\002" +
    "\050\002\000\002\041\003\000\002\041\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\006\003\006\004\004\001\002\000\004\010" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002\000\014\003\016\005" +
    "\011\006\013\010\021\012\ufffb\001\002\000\004\010\021" +
    "\001\002\000\014\003\016\005\011\006\013\010\021\012" +
    "\ufffb\001\002\000\004\010\306\001\002\000\004\012\035" +
    "\001\002\000\004\010\027\001\002\000\016\003\ufff4\005" +
    "\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\001\002\000\014" +
    "\003\016\005\011\006\013\010\021\012\ufffb\001\002\000" +
    "\014\003\016\005\011\006\013\010\021\012\ufffb\001\002" +
    "\000\006\010\uffe2\021\023\001\002\000\004\010\uffe4\001" +
    "\002\000\004\022\024\001\002\000\004\010\uffe3\001\002" +
    "\000\004\012\ufffc\001\002\000\004\012\ufffd\001\002\000" +
    "\006\014\ufff2\015\031\001\002\000\004\014\034\001\002" +
    "\000\004\010\032\001\002\000\006\014\ufff2\015\031\001" +
    "\002\000\004\014\ufff3\001\002\000\016\003\ufff5\005\ufff5" +
    "\006\ufff5\010\ufff5\011\ufff5\012\ufff5\001\002\000\012\003" +
    "\037\007\042\010\021\011\ufff9\001\002\000\012\003\037" +
    "\007\042\010\021\011\ufff9\001\002\000\012\003\uffec\007" +
    "\uffec\010\uffec\011\uffec\001\002\000\004\011\304\001\002" +
    "\000\004\010\276\001\002\000\004\010\043\001\002\000" +
    "\004\017\044\001\002\000\006\010\021\020\uffea\001\002" +
    "\000\004\010\272\001\002\000\004\020\uffeb\001\002\000" +
    "\004\020\050\001\002\000\010\003\016\010\021\012\uffe8" +
    "\001\002\000\004\012\054\001\002\000\010\003\016\010" +
    "\021\012\uffe8\001\002\000\004\012\uffe9\001\002\000\026" +
    "\003\066\010\071\011\uffdf\012\054\014\056\023\070\024" +
    "\062\025\061\026\063\027\057\001\002\000\012\003\uffed" +
    "\007\uffed\010\uffed\011\uffed\001\002\000\030\003\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\014\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\001\002\000\004\017\263\001" +
    "\002\000\030\003\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\001" +
    "\002\000\024\003\075\010\uffac\014\uffc0\016\uffac\017\uffac" +
    "\037\100\040\uffac\046\uffac\047\uffac\001\002\000\006\003" +
    "\245\017\244\001\002\000\006\003\225\017\224\001\002" +
    "\000\004\011\223\001\002\000\026\003\066\010\071\011" +
    "\uffdf\012\054\014\056\023\070\024\062\025\061\026\063" +
    "\027\057\001\002\000\032\003\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\014\uffc6\017\uffce\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\001\002\000\006\013\207\017\122\001" +
    "\002\000\006\003\153\017\152\001\002\000\052\003\uff9a" +
    "\013\uff9a\014\uff9a\015\uff9a\017\uff9a\020\uff9a\021\074\022" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\041\072\042\uff9a\043\uff9a\044\uff9a\045\uff9a\001" +
    "\002\000\004\010\150\001\002\000\046\003\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\017\uff9d\020\uff9d\022\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\001\002\000\022\003\075\010" +
    "\uffac\016\uffac\017\uffac\037\100\040\uffac\046\uffac\047\uffac" +
    "\001\002\000\030\003\uffae\014\uffae\015\uffae\020\uffae\022" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\001\002\000\004\022\146\001\002\000\016\010\071\016" +
    "\103\017\110\040\107\046\101\047\111\001\002\000\016" +
    "\010\uffad\016\uffad\017\uffad\040\uffad\046\uffad\047\uffad\001" +
    "\002\000\042\003\uff94\014\uff94\015\uff94\020\uff94\022\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\001\002\000\034" +
    "\003\uffaa\014\uffaa\015\uffaa\020\uffaa\022\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\142\042\143" +
    "\001\002\000\042\003\uffa4\014\uffa4\015\uffa4\020\uffa4\022" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\037\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\001\002\000" +
    "\042\003\uffa7\014\uffa7\015\uffa7\020\uffa7\022\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\042" +
    "\uffa7\043\132\044\134\045\136\001\002\000\042\003\uffa5" +
    "\014\uffa5\015\uffa5\020\uffa5\022\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\001\002\000\044\003\uffa0\014\uffa0\015" +
    "\uffa0\017\122\020\uffa0\022\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\001\002\000\004\010\114\001\002\000\022" +
    "\003\075\010\uffac\016\uffac\017\uffac\037\100\040\uffac\046" +
    "\uffac\047\uffac\001\002\000\042\003\uff93\014\uff93\015\uff93" +
    "\020\uff93\022\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\001\002\000\004\020\113\001\002\000\042\003\uffa2\014" +
    "\uffa2\015\uffa2\020\uffa2\022\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\001\002\000\044\003\uff9e\014\uff9e\015\uff9e" +
    "\020\uff9e\021\115\022\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\001\002\000\022\003\075\010\uffac\016\uffac\017" +
    "\uffac\037\100\040\uffac\046\uffac\047\uffac\001\002\000\042" +
    "\003\uffa3\014\uffa3\015\uffa3\020\uffa3\022\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\001\002\000\004\022\120\001" +
    "\002\000\042\003\uff9f\014\uff9f\015\uff9f\020\uff9f\022\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\001\002\000\042" +
    "\003\uffa6\014\uffa6\015\uffa6\020\uffa6\022\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\001\002\000\024\003\075\010" +
    "\uffac\016\uffac\017\uffac\020\uffbb\037\100\040\uffac\046\uffac" +
    "\047\uffac\001\002\000\042\003\uffa1\014\uffa1\015\uffa1\020" +
    "\uffa1\022\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\001" +
    "\002\000\004\020\131\001\002\000\006\015\127\020\uffb9" +
    "\001\002\000\004\020\uffbc\001\002\000\024\003\075\010" +
    "\uffac\016\uffac\017\uffac\020\uffbb\037\100\040\uffac\046\uffac" +
    "\047\uffac\001\002\000\004\020\uffba\001\002\000\042\003" +
    "\uffbd\014\uffbd\015\uffbd\020\uffbd\022\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\001\002\000\016\010\uff97\016\uff97" +
    "\017\uff97\040\uff97\046\uff97\047\uff97\001\002\000\016\010" +
    "\071\016\103\017\110\040\107\046\101\047\111\001\002" +
    "\000\016\010\uff96\016\uff96\017\uff96\040\uff96\046\uff96\047" +
    "\uff96\001\002\000\034\003\uffa9\014\uffa9\015\uffa9\020\uffa9" +
    "\022\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\042\uffa9\001\002\000\016\010\uff95\016\uff95" +
    "\017\uff95\040\uff95\046\uff95\047\uff95\001\002\000\034\003" +
    "\uffa8\014\uffa8\015\uffa8\020\uffa8\022\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\042\uffa8\001" +
    "\002\000\016\010\071\016\103\017\110\040\107\046\101" +
    "\047\111\001\002\000\030\003\uffaf\014\uffaf\015\uffaf\020" +
    "\uffaf\022\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\001\002\000\016\010\uff98\016\uff98\017\uff98\040" +
    "\uff98\046\uff98\047\uff98\001\002\000\016\010\uff99\016\uff99" +
    "\017\uff99\040\uff99\046\uff99\047\uff99\001\002\000\034\003" +
    "\uffaa\014\uffaa\015\uffaa\020\uffaa\022\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\142\042\143\001" +
    "\002\000\030\003\uffab\014\uffab\015\uffab\020\uffab\022\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\001" +
    "\002\000\052\003\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a" +
    "\020\uff9a\021\074\022\uff9a\031\uff9a\032\uff9a\033\uff9a\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\041\072\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\001\002\000\046\003\uff9b\013\uff9b\014" +
    "\uff9b\015\uff9b\017\uff9b\020\uff9b\022\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\001\002\000\052\003\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\017\uff9a\020\uff9a\021\074\022\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\041\072\042\uff9a\043\uff9a\044\uff9a\045\uff9a\001\002\000" +
    "\046\003\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\020\uff9c" +
    "\022\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\001\002" +
    "\000\022\003\162\010\uffac\016\uffac\017\uffac\037\100\040" +
    "\uffac\046\uffac\047\uffac\001\002\000\004\020\uffd6\001\002" +
    "\000\004\020\155\001\002\000\024\003\066\010\071\012" +
    "\054\014\056\023\070\024\062\025\061\026\063\027\057" +
    "\001\002\000\030\003\uffc2\010\uffc2\011\uffc2\012\uffc2\014" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\157" +
    "\001\002\000\024\003\066\010\071\012\054\014\056\023" +
    "\070\024\062\025\061\026\063\027\057\001\002\000\030" +
    "\003\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\001\002\000\030" +
    "\003\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\001\002\000\022" +
    "\003\uffae\020\uffd4\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\001\002\000\020\003\172\031\176\032\174" +
    "\033\177\034\175\035\170\036\171\001\002\000\004\020" +
    "\165\001\002\000\024\003\066\010\071\012\054\014\056" +
    "\023\070\024\062\025\061\026\063\027\057\001\002\000" +
    "\030\003\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\157\001\002\000" +
    "\030\003\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000" +
    "\022\003\uffb1\010\uffb1\016\uffb1\017\uffb1\037\uffb1\040\uffb1" +
    "\046\uffb1\047\uffb1\001\002\000\022\003\uffb0\010\uffb0\016" +
    "\uffb0\017\uffb0\037\uffb0\040\uffb0\046\uffb0\047\uffb0\001\002" +
    "\000\022\003\uffb7\010\uffb7\016\uffb7\017\uffb7\037\uffb7\040" +
    "\uffb7\046\uffb7\047\uffb7\001\002\000\022\003\075\010\uffac" +
    "\016\uffac\017\uffac\037\100\040\uffac\046\uffac\047\uffac\001" +
    "\002\000\022\003\uffb4\010\uffb4\016\uffb4\017\uffb4\037\uffb4" +
    "\040\uffb4\046\uffb4\047\uffb4\001\002\000\022\003\uffb2\010" +
    "\uffb2\016\uffb2\017\uffb2\037\uffb2\040\uffb2\046\uffb2\047\uffb2" +
    "\001\002\000\022\003\uffb5\010\uffb5\016\uffb5\017\uffb5\037" +
    "\uffb5\040\uffb5\046\uffb5\047\uffb5\001\002\000\022\003\uffb3" +
    "\010\uffb3\016\uffb3\017\uffb3\037\uffb3\040\uffb3\046\uffb3\047" +
    "\uffb3\001\002\000\004\020\uffb8\001\002\000\022\003\075" +
    "\010\uffac\016\uffac\017\uffac\037\100\040\uffac\046\uffac\047" +
    "\uffac\001\002\000\004\020\uffb6\001\002\000\004\020\204" +
    "\001\002\000\024\003\066\010\071\012\054\014\056\023" +
    "\070\024\062\025\061\026\063\027\057\001\002\000\030" +
    "\003\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\157\001\002\000\030" +
    "\003\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\001\002\000\022" +
    "\003\075\010\uffac\016\uffac\017\uffac\037\100\040\uffac\046" +
    "\uffac\047\uffac\001\002\000\004\014\uffc4\001\002\000\004" +
    "\014\212\001\002\000\030\003\uffde\010\uffde\011\uffde\012" +
    "\uffde\014\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\001\002\000\004\014\uffc5\001\002\000\004\017" +
    "\215\001\002\000\022\003\075\010\uffac\016\uffac\017\uffac" +
    "\037\100\040\uffac\046\uffac\047\uffac\001\002\000\004\020" +
    "\217\001\002\000\024\003\066\010\071\012\054\014\056" +
    "\023\070\024\062\025\061\026\063\027\057\001\002\000" +
    "\030\003\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\157\001\002\000" +
    "\030\003\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\001\002\000" +
    "\004\011\uffe0\001\002\000\032\003\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\001\002\000\006\003\232\010\071" +
    "\001\002\000\004\010\uffcc\001\002\000\004\010\071\001" +
    "\002\000\004\020\230\001\002\000\004\014\231\001\002" +
    "\000\030\003\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\001\002" +
    "\000\004\020\uffca\001\002\000\006\003\234\020\235\001" +
    "\002\000\004\014\uffc8\001\002\000\004\014\236\001\002" +
    "\000\030\003\uffda\010\uffda\011\uffda\012\uffda\014\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\001\002" +
    "\000\004\014\240\001\002\000\030\003\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\014\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\001\002\000\004\020\242\001\002\000" +
    "\004\014\243\001\002\000\030\003\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\014\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\001\002\000\022\003\251\010\uffac\016\uffac" +
    "\017\uffac\037\100\040\uffac\046\uffac\047\uffac\001\002\000" +
    "\004\020\uffd2\001\002\000\004\020\247\001\002\000\024" +
    "\003\066\010\071\012\054\014\056\023\070\024\062\025" +
    "\061\026\063\027\057\001\002\000\030\003\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\014\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\001\002\000\022\003\uffae\020\uffd0" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\001" +
    "\002\000\004\020\253\001\002\000\024\003\066\010\071" +
    "\012\054\014\056\023\070\024\062\025\061\026\063\027" +
    "\057\001\002\000\030\003\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\014\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\001\002\000\004\020\256\001\002\000\024\003\066" +
    "\010\071\012\054\014\056\023\070\024\062\025\061\026" +
    "\063\027\057\001\002\000\030\003\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\014\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\001\002\000\004\014\262\001\002\000\004" +
    "\014\uffc1\001\002\000\030\003\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\014\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\001\002\000\022\003\075\010\uffac\016\uffac\017" +
    "\uffac\037\100\040\uffac\046\uffac\047\uffac\001\002\000\006" +
    "\015\265\020\uffbe\001\002\000\006\046\101\047\111\001" +
    "\002\000\004\020\267\001\002\000\004\014\270\001\002" +
    "\000\030\003\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\001\002" +
    "\000\004\020\uffbf\001\002\000\006\015\274\020\uffe5\001" +
    "\002\000\004\020\uffe7\001\002\000\004\010\021\001\002" +
    "\000\004\020\uffe6\001\002\000\004\017\277\001\002\000" +
    "\006\010\021\020\uffea\001\002\000\004\020\301\001\002" +
    "\000\010\003\016\010\021\012\uffe8\001\002\000\004\012" +
    "\054\001\002\000\012\003\uffee\007\uffee\010\uffee\011\uffee" +
    "\001\002\000\004\002\001\001\002\000\004\011\ufffa\001" +
    "\002\000\004\012\307\001\002\000\010\003\016\010\021" +
    "\011\uffef\001\002\000\010\003\016\010\021\011\uffef\001" +
    "\002\000\004\011\312\001\002\000\014\003\ufff1\005\ufff1" +
    "\006\ufff1\010\ufff1\012\ufff1\001\002\000\004\011\ufff0\001" +
    "\002\000\004\012\ufffe\001\002\000\004\010\316\001\002" +
    "\000\004\013\317\001\002\000\010\016\322\046\101\047" +
    "\111\001\002\000\004\014\323\001\002\000\004\014\ufff7" +
    "\001\002\000\004\014\ufff6\001\002\000\014\003\ufff8\005" +
    "\ufff8\006\ufff8\010\ufff8\012\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\013\005\016\006\017\011\011\012\014\001\001\000" +
    "\004\012\314\001\001\000\014\003\313\005\016\006\017" +
    "\011\011\012\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\025" +
    "\005\016\006\017\011\011\012\014\001\001\000\014\003" +
    "\024\005\016\006\017\011\011\012\014\001\001\000\004" +
    "\021\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\037\007\035\012\040\001\001\000\010\004" +
    "\304\007\035\012\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\044\015\046\017\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\051\012\014\016\050\001\001\000\004\024\054\001\001" +
    "\000\010\005\051\012\014\016\052\001\001\000\002\001" +
    "\001\000\012\022\064\023\063\024\057\026\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\260\032\257\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\064\023\221\024\057\026\066\001\001\000\004" +
    "\057\213\001\001\000\006\027\207\052\210\001\001\000" +
    "\002\001\001\000\004\050\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\075\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\104\026\105" +
    "\042\101\044\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\140\041\137\001\001\000\002\001\001" +
    "\000\006\043\134\045\132\001\001\000\002\001\001\000" +
    "\006\027\122\046\120\001\001\000\002\001\001\000\006" +
    "\025\111\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\115\001\001\000\006" +
    "\025\116\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\124" +
    "\034\123\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\125\001\001\000\002\001\001\000\010" +
    "\025\124\034\127\037\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\104\026\105" +
    "\042\136\044\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\104" +
    "\026\105\042\143\044\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\144\041\137" +
    "\001\001\000\002\001\001\000\004\050\146\001\001\000" +
    "\002\001\001\000\004\050\150\001\001\000\002\001\001" +
    "\000\010\025\162\030\163\037\076\001\001\000\004\053" +
    "\153\001\001\000\002\001\001\000\010\022\155\024\057" +
    "\026\066\001\001\000\004\031\157\001\001\000\010\022" +
    "\160\024\057\026\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\202\001\001\000\004\036\172\001" +
    "\001\000\002\001\001\000\010\022\165\024\057\026\066" +
    "\001\001\000\004\031\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\200\001\001" +
    "\000\006\025\177\037\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\201\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\204\024\057\026\066" +
    "\001\001\000\004\031\205\001\001\000\002\001\001\000" +
    "\006\025\212\037\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\162\030\215\037\076\001\001\000\002" +
    "\001\001\000\010\022\217\024\057\026\066\001\001\000" +
    "\004\031\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\232\001\001\000\004\060" +
    "\225\001\001\000\004\026\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\240\001" +
    "\001\000\002\001\001\000\004\062\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\162\030\251\037\076\001\001\000\004\055" +
    "\245\001\001\000\002\001\001\000\010\022\247\024\057" +
    "\026\066\001\001\000\002\001\001\000\004\056\254\001" +
    "\001\000\002\001\001\000\010\022\253\024\057\026\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\256\024\057\026\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\263\037\076\001\001\000\004\033\265\001\001\000\004" +
    "\010\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\272\001\001" +
    "\000\002\001\001\000\006\012\044\017\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\044\015\277" +
    "\017\045\001\001\000\002\001\001\000\010\005\051\012" +
    "\014\016\301\001\001\000\004\024\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\307\012\014\014\310\001\001\000\010" +
    "\005\307\012\014\014\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\320\051\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void syntax_error(Symbol s)
  {
    defErro(s.left, s.right);
  }

  public void defErro(int linha, int coluna, String texto)
  {
    ((scanner.Scanner) getScanner()).defErro(linha,coluna,texto);
  }

  public void defErro(int linha, int coluna)
  {
    ((scanner.Scanner) getScanner()).defErro(linha,coluna);
  }

  public void defErro(String texto)
  {
    ((scanner.Scanner) getScanner()).defErro(texto);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literal ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literal ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mulop ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // mulop ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // mulop ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // addop ::= OP_MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // addop ::= OP_MAIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_vinte ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_vinte",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_vinte ::= ABRE_COLCHETE expr FECHA_COLCHETE lista_vinte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_vinte",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_vinte ::= OP_PONTO IDENTIFICADOR lista_vinte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_vinte",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // designador ::= IDENTIFICADOR lista_vinte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("designador",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_dezenove ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezenove",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_dezenove ::= ABRE_COLCHETE expr FECHA_COLCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezenove",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_dezoito ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezoito",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_dezoito ::= actpars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezoito",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= ABRE_PARENTESES expr FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= KWNEW IDENTIFICADOR lista_dezenove 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= designador lista_dezoito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lista_dezessete ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezessete",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lista_dezessete ::= mulop term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezessete",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= factor lista_dezessete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_dezesseis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezesseis",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_dezesseis ::= addop term lista_dezesseis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dezesseis",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_quinze ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quinze",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_quinze ::= OP_MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quinze",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro em expressao"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= lista_quinze term lista_dezesseis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relop ::= OP_MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relop ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // relop ::= OP_MAIORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relop ::= OP_MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relop ::= OP_DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relop ::= OP_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= expr error NT$8 expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro ao produzir CONDITION"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expr relop expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_quatorze ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quatorze",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_quatorze ::= OP_VIRGULA lista_treze 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quatorze",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_treze ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_treze",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_treze ::= expr lista_quatorze 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_treze",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // actpars ::= ABRE_PARENTESES lista_treze FECHA_PARENTESES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actpars",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_doze ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_doze",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_doze ::= OP_VIRGULA literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_doze",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_onze ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_onze",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_onze ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_onze",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_dez ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dez",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_dez ::= KWELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dez",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaBBB ::= actpars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaBBB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaBBB ::= OP_RECEBE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaBBB",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro em STATEMENT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= KWREAD ABRE_PARENTESES designador error NT$7 OP_PONTOEVIRGULA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.defErro("Erro em READ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= KWREAD ABRE_PARENTESES error NT$6 FECHA_PARENTESES OP_PONTOEVIRGULA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.defErro("Erro ao passar os parametros em READ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= KWREAD error NT$5 designador FECHA_PARENTESES OP_PONTOEVIRGULA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.defErro("Falta  abrir parenteses em READ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= error NT$4 ABRE_PARENTESES condition FECHA_PARENTESES statement lista_dez 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro ao produzir as estruturas IF ou  WHILE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= KWWHILE ABRE_PARENTESES error NT$3 FECHA_PARENTESES statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro em CONDICAO na estrutura WHILE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= KWWHILE error NT$2 FECHA_PARENTESES statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.defErro("Falta abrir parenteses na estrutura WHILE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= KWIF ABRE_PARENTESES error NT$1 FECHA_PARENTESES statement lista_dez 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.defErro("erro em CONDICAO na estrutura IF"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= KWIF error NT$0 FECHA_PARENTESES statement lista_dez 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.defErro("Falta  abrir parenteses na estrutura IF"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= KWPRINT ABRE_PARENTESES expr lista_doze FECHA_PARENTESES OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= KWREAD ABRE_PARENTESES designador FECHA_PARENTESES OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= KWRETURN lista_onze OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= KWWHILE ABRE_PARENTESES condition FECHA_PARENTESES statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= KWIF ABRE_PARENTESES condition FECHA_PARENTESES statement lista_dez 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= designador listaBBB OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_nove ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_nove",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_nove ::= statement lista_nove 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_nove",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block ::= ABRE_CHAVE lista_nove FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_oito ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_oito",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_oito ::= ABRE_COLCHETE FECHA_COLCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_oito",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= IDENTIFICADOR lista_oito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_sete ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sete",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_sete ::= OP_VIRGULA formpars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sete",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formpars ::= type IDENTIFICADOR lista_sete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formpars",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_seis ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_seis",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_seis ::= vardecl lista_seis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_seis",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_cinco ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_cinco",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_cinco ::= formpars 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_cinco",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // methoddecl ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro em DECLARACAO DE METODO"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methoddecl ::= KWVOID IDENTIFICADOR ABRE_PARENTESES lista_cinco FECHA_PARENTESES lista_seis block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methoddecl ::= type IDENTIFICADOR ABRE_PARENTESES lista_cinco FECHA_PARENTESES lista_seis block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methoddecl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_quatro ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quatro",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_quatro ::= vardecl lista_quatro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_quatro",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // classdecl ::= KWCLASS IDENTIFICADOR ABRE_CHAVE lista_quatro FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classdecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_tres ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tres",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_tres ::= OP_VIRGULA IDENTIFICADOR lista_tres 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_tres",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vardecl ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro em DECLARACAO DE VARIAVEL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vardecl ::= type IDENTIFICADOR lista_tres OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaAAAA ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaAAAA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaAAAA ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaAAAA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constdecl ::= KWFINAL type IDENTIFICADOR OP_RECEBE listaAAAA OP_PONTOEVIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constdecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_dois ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dois",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_dois ::= methoddecl lista_dois 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_dois",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_um ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_um",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_um ::= classdecl lista_um 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_um",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_um ::= vardecl lista_um 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_um",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_um ::= constdecl lista_um 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_um",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;
		 parser.defErro("erro ao declarar PROGRAMA"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= KWPROGRAMA IDENTIFICADOR lista_um ABRE_CHAVE lista_dois FECHA_CHAVE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

